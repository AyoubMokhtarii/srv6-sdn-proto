syntax = "proto3";

import "empty_req.proto";
import "status_codes.proto";


/* RPC methods implementing a northbound interface for SRv6-VPN use cases */

service SRv6VPN {
  // Get all the VPNs in a router
  rpc GetVPNs (EmptyRequest) returns (SRv6VPNReply) {}
  // Create a new VPN starting from an intent provided by an application on the northbound interface
  rpc CreateVPN (CreateVPNRequest) returns (SRv6VPNReply) {}
  // Add an interface to an existing VPN
  rpc AssignInterfaceToVPN (AssignInterfaceToVPNRequest) returns (SRv6VPNReply) {}
  // Remove an interface to an existing VPN
  rpc RemoveInterfaceFromVPN (RemoveInterfaceFromVPNRequest) returns (SRv6VPNReply) {}
  // Remove an existing VPN
  rpc RemoveVPN (RemoveVPNRequest) returns (SRv6VPNReply) {}
}

message CreateVPNRequest {
  /* Intent represents the description of a VPN to be created 
   * A VPN has a name, a list of interfaces and an identifier for the tenant */
  message Intent {
    string vpn_name = 1;
    VPNType vpn_type = 2;
    repeated VPNInterface interfaces = 3;
    uint32 tenantid = 4;
  }
  repeated Intent intents = 1;
}

/* An interface has an identifier of the router on which the interface is placed,
 * a name an IP address taken from a private addressing space */
message VPNInterface {
  string routerid = 1;
  string interface_name = 2;
  string interface_ip = 3;
  string vpn_prefix = 4;
}

/* AssignInterfaceToVPNRequest represents the request 
 * to add an interface to an existing VPN */
message AssignInterfaceToVPNRequest {
  string vpn_name = 1;
  repeated VPNInterface interfaces = 2;
  uint32 tenantid = 3;
}

/* RemoveInterfaceFromVPNRequest represents the request 
 * to remove an interface from an existing VPN */
message RemoveInterfaceFromVPNRequest {
  string vpn_name = 1;
  repeated VPNInterface interfaces = 2;
  uint32 tenantid = 3;
}

/* RemoveVPNRequest represents the request to remove an existing VPN */
message RemoveVPNRequest {
  string vpn_name = 1;
  uint32 tenantid = 2;
}

/* Reports the outcome of a gRPC request command */
message SRv6VPNReply {
  StatusCode status = 1;
  repeated VPN vpns = 2;
}

/* VPN */
message VPN {
  string vpn_name = 1;
  uint32 tableid = 2;
  repeated VPNInterface interfaces = 3;
}

/* VPN type */
enum VPNType {
  L2VPN = 0;
  IPv4VPN = 1;
  IPv6VPN = 2;
}