syntax = "proto3";

import "srv6_sdn_proto/empty_req.proto";
import "srv6_sdn_proto/status_codes.proto";


/* RPC methods implementing a northbound interface for SRv6-VPN use cases */

service SRv6VPN {
  // Get all the VPNs in a router
  rpc GetVPNs (EmptyRequest) returns (SRv6VPNReply) {}
  // Create a new VPN starting from an intent provided by an application on the northbound interface
  rpc CreateVPN (SRv6VPNRequest) returns (SRv6VPNReply) {}
  // Add an interface to an existing VPN
  rpc AssignInterfaceToVPN (SRv6VPNRequest) returns (SRv6VPNReply) {}
  // Remove an interface to an existing VPN
  rpc RemoveInterfaceFromVPN (SRv6VPNRequest) returns (SRv6VPNReply) {}
  // Remove an existing VPN
  rpc RemoveVPN (SRv6VPNRequest) returns (SRv6VPNReply) {}
}

/* Request message carrying the intent(s) */
message SRv6VPNRequest {
  repeated Intent intents = 1;
}

/* Intent represents the description of a VPN to be created 
 * A VPN has a name, a list of interfaces and an identifier for the tenant */
message Intent {
  string vpn_name = 1;
  VPNType vpn_type = 2;
  repeated VPNInterface interfaces = 3;
  uint32 tenantid = 4;
  TunnelType tunnel = 5;
  TunnelType encap = 6;
}

/* An interface has an identifier of the router on which the interface is placed,
 * a name an IP address taken from a private addressing space */
message VPNInterface {
  string routerid = 1;
  string interface_name = 2;
  string interface_ip = 3;
  string vpn_prefix = 4;
}

/* Reports the outcome of a gRPC request command */
message SRv6VPNReply {
  StatusCode status = 1;
  repeated VPN vpns = 2;
}

/* VPN */
message VPN {
  string vpn_name = 1;
  uint32 tableid = 2;
  repeated VPNInterface interfaces = 3;
}

/* VPN type */
enum VPNType {
  L2VPN = 0;
  IPv4VPN = 1;
  IPv6VPN = 2;
}

/* Tunnel type */
enum TunnelType {
  SRv6 = 0;
  IPsec_ESP_GRE = 1;
  SRv6_IPsec_ESP_GRE = 2;
  SRv6_IPsec_ESP_IP = 3;
}