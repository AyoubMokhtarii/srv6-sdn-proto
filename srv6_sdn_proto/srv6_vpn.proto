syntax = "proto3";

import "srv6_sdn_proto/empty_req.proto";
import "srv6_sdn_proto/status_codes.proto";


/* RPC methods implementing a northbound interface for SRv6-VPN use cases */

service OverlayService {
  // Get all the overlays in a router
  rpc GetOverlays (EmptyRequest) returns (OverlayServiceReply) {}
  // Create a new overlay starting from an intent provided by an application on the northbound interface
  rpc CreateOverlay (OverlayServiceRequest) returns (OverlayServiceReply) {}
  // Add a slice to an existing overlay
  rpc AssignSliceToOverlay (OverlayServiceRequest) returns (OverlayServiceReply) {}
  // Remove an interface to an existing overlay
  rpc RemoveSliceFromOverlay (OverlayServiceRequest) returns (OverlayServiceReply) {}
  // Remove an existing overlay
  rpc RemoveOverlay (OverlayServiceRequest) returns (OverlayServiceReply) {}
}

/* Request message carrying the intent(s) */
message OverlayServiceRequest {
  repeated Intent intents = 1;
}

/* Intent represents the description of a VPN to be created 
 * A VPN has a name, a list of interfaces and an identifier for the tenant */
message Intent {
  string overlay_name = 1;
  VPNType overlay_type = 2;
  repeated Slice slices = 3;
  uint32 tenantid = 4;
  string tunnel = 5;
  TunnelInfo tunnel_info = 6;
  //TunnelType tunnel = 5;
}

message TunnelInfo {
  
}

/* An interface has an identifier of the router on which the interface is placed,
 * a name an IP address taken from a private addressing space */
message Slice {
  string routerid = 1;
  string interface_name = 2;
}

/* Reports the outcome of a gRPC request command */
message OverlayServiceReply {
  StatusCode status = 1;
  repeated Overlay overlays = 2;
}

/* Overlay */
message Overlay {
  string overlay_name = 1;
  uint32 tableid = 2;
  repeated Slice slices = 3;
}

/* Overlay type */
enum OverlayType {
  L2VPN = 0;
  IPv4Overlay = 1;
  IPv6Overlay = 2;
}

/* Tunnel type */
/*
enum TunnelType {
  SRv6 = 0;
  IPsec_ESP_GRE = 1;
  SRv6_IPsec_ESP_GRE = 2;
  SRv6_IPsec_ESP_IP = 3;
}
*/